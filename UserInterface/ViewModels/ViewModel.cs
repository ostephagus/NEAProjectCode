using System.ComponentModel;
using UserInterface.Converters;
using UserInterface.HelperClasses;

namespace UserInterface.ViewModels
{
    /// <summary>
    /// Abstract parent class for view models, providing functionality common to all view models.
    /// </summary>
    public abstract class ViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler? PropertyChanged;

        protected void OnPropertyChanged(object? sender, string propertyName)
        {
            PropertyChanged?.Invoke(sender, new PropertyChangedEventArgs(propertyName));
        }

        protected ParameterHolder? parameterHolder;
        protected UnitHolder? unitHolder;

        protected ParameterStruct<T> ModifyParameterValue<T>(ParameterStruct<T> parameterStruct, T newValue)
        {
            parameterStruct.Value = newValue;
            return parameterStruct;
        }

        public UnitHolder UnitHolder { get => unitHolder!; set => unitHolder = value; }
        public ParameterHolder ParameterHolder { get => parameterHolder!; set => parameterHolder = value; }

        public UnitClasses.Dimensionless DimensionlessUnit { get; } = new UnitClasses.Dimensionless();
        public UnitClasses.LengthUnit LengthUnit { get => UnitHolder.LengthUnit; }
        public UnitClasses.SpeedUnit SpeedUnit { get => UnitHolder.SpeedUnit; }
        public UnitClasses.TimeUnit TimeUnit { get => UnitHolder.TimeUnit; }
        public UnitClasses.DensityUnit DensityUnit { get => UnitHolder.DensityUnit; }
        public UnitClasses.ViscosityUnit ViscosityUnit { get => UnitHolder.ViscosityUnit; }

        public ViewModel() { }

        public ViewModel(ParameterHolder parameterHolder, UnitHolder unitHolder)
        {
            this.parameterHolder = parameterHolder;
            this.unitHolder = unitHolder;
            unitHolder.PropertyChanged += OnUnitsChanged;
        }

        /// <summary>
        /// Handles property changed notifications generated by <see cref="UnitHolder"/>.
        /// </summary>
        private void OnUnitsChanged(object? sender, PropertyChangedEventArgs e)
        {
            switch (e.PropertyName)
            {
                case nameof(UnitHolder.LengthUnit):
                    OnPropertyChanged(this, nameof(LengthUnit));
                    break;
                case nameof(UnitHolder.SpeedUnit):
                    OnPropertyChanged(this, nameof(SpeedUnit));
                    break;
                case nameof(UnitHolder.TimeUnit):
                    OnPropertyChanged(this, nameof(TimeUnit));
                    break;
                case nameof(UnitHolder.DensityUnit):
                    OnPropertyChanged(this, nameof(DensityUnit));
                    break;
                case nameof(UnitHolder.ViscosityUnit):
                    OnPropertyChanged(this, nameof(ViscosityUnit));
                    break;
            }
        }
    }
}
